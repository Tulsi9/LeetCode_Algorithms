class Solution {
public:
     bool canPartition(vector<int>& nums, vector<bool>& visited, int start, int k, int curSum, int subsetSum) {
    if (k == 0) return true;
    if (curSum > subsetSum) return false;
    if (curSum == subsetSum)  {
        return canPartition(nums, visited, 0, k - 1, 0, subsetSum);
    }

    for (int i = start; i < nums.size(); i++) {
        if (visited[i]) continue;
        visited[i] = true;
        if (canPartition(nums, visited, i + 1, k, curSum + nums[i], subsetSum)) return true;
        visited[i] = false;
    }

    return false;
}

 bool canPartitionKSubsets(vector<int>& nums, int k) {
    int total = 0;
    for(auto el: nums){
        total+=el;
    }

    if(total%k !=0){
        return false;
    }

    if (nums.size() < k) return false;

    int subsetSum = total/k;
     vector<bool> visited(nums.size(),false);
    return canPartition(nums, visited, 0, k, 0, subsetSum);

}

};
